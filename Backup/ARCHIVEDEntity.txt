#!/usr/bin/env python

"""Entity.py: Module that contains abstract base class for a generic Entity"""

from collections import OrderedDict as dict
from uuid import uuid4
from component.Component import Component


class Entity(object):
    '''Entity container for a UID and list of components.

    >>> player = Entity('player', 0)
    >>> player
    <Entity player:0>
    >>> print player
    OrderedDict()
    >>> player.health = 1
    >>> print player.health
    1
    >>> print player['health']
    1
    >>> player['health'] = 10
    >>> player.health
    10
    >>> player['damage'] = 5
    >>> player.damage
    5
    >>> print player.components
    OrderedDict([('health', 10), ('damage', 5)])
    '''
    __slots__ = ['uid', 'name', 'components'] # Define the attributes that we expect this class to have with slot.

    def __init__(self, name=None, uid=None):
        '''Entity init.'''
        self.uid = uuid4() if uid is None else uid
        self.name = name if name is not None else ''
        self.components = dict()

    def __repr__(self):
        '''Querying the representation returns: <Entity name:0>.'''
        cname = self.__class__.__name__
        name = self.name or self.uid
        if name != self.uid:
            name = '{}:{}'.format(self.name, self.uid)
        return '<{} {}>'.format(cname, name)

    def __str__(self):
        '''Printing this class runs this to return component collection.'''
        return str(self.components)

    def __getitem__(self, key):
        '''Return the component value using the key.'''
        return self.components[key]

    def __setitem__(self, key, value):
        '''Set the component using the key and value.'''
        # TODO Component updates
        self.components[key] = value

    def __getattr__(self, key):
        '''Allows access to the properties/components as an attr.'''
        if key in super(Entity, self).__getattribute__('__slots__'):
            return super(Entity, self).__getattr__(key)
        else:
            return self.components[key]

    def __setattr__(self, key, value):
        '''Main method of adding components to entities.
        Allows access to the properties/components as an attr.
            Args:
                key (str): the key that will be used to access this Component inst.
                value (Component): the Component we are attempting to append.

            TODO:
                Move each chunk of this complexity into its own function.
        '''
        from ..component.Component import Component
        # If the key exists in this entity's slots, set the corresponding attr.
        if key in super(Entity, self).__getattribute__('__slots__'):
            super(Entity, self).__setattr__(key, value)
        else:
            # Make sure the passed component is an instance derived from Component.
            if isinstance(value, Component):
                # Get ref to passed component's C-E relationship Catalog.
                vCatalog = value.__class__.Catalog
                # If passed component has no owner, make this entity the owner.
                if value.owner_entity is None:
                    value.owner_entity = self
                    # Scan the component's C-E relationship catalog.
                    # Find the passed-in component.
                    # Add this entity as the owner of the passed-in component in the Catalog.
                    for entity, comp in vCatalog.items():
                        if comp == value:
                            if entity not in vCatalog:
                                vCatalog.pop(entity)
                                # Add the new relationship to this Entity's components list.
                                for relationship_name, component in entity.components:
                                    if component == value:
                                        entity.components.pop(relationship_name)
                                        break
                            vCatalog[self] = value
            self.components[key] = value

if __name__ == '__main__':
    from doctest import testmod

    testmod()
